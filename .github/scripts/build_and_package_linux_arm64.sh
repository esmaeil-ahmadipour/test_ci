#!/usr/bin/env bash

set -euo pipefail

# --------------------------------------
# CONFIGURATION
# --------------------------------------

TAG_NAME="${1:-local}"  # Use first argument as tag or fallback to 'local'
OUTPUT_NAME="PactusGUI-${TAG_NAME}-linux-arm64.AppImage"
APPDIR="build/linux/arm64/release/bundle"
APPIMAGE_TOOL="appimagetool-aarch64.AppImage"
APPIMAGE_URL="https://github.com/AppImage/AppImageKit/releases/download/continuous/${APPIMAGE_TOOL}"
PACTUS_CLI_URL="https://github.com/pactus-project/pactus/releases/download/v1.7.1/pactus-cli_1.7.1_linux_arm64.tar.gz"
PACTUS_CLI_DEST="pactus-cli-extracted"
FINAL_CLI_DEST="extracted_appimage/squashfs-root/usr/bin/lib/src/core/native_resources/linux"
EXTRACTED_DIR="extracted_appimage/squashfs-root"

# --------------------------------------
# FUNCTIONS
# --------------------------------------

install_dependencies() {
  echo "üîß Installing dependencies..."
  sudo apt-get update
  sudo apt-get install -y libgtk-3-dev libfuse2 cmake ninja-build wget appstream tree
}

build_flutter_linux() {
  echo "üî® Building Flutter app for Linux ARM64..."
  flutter pub get
  flutter build linux --release --target-platform=linux-arm64
}

download_appimage_tool() {
  echo "‚¨áÔ∏è Downloading AppImage tool..."
  wget -q "$APPIMAGE_URL"
  chmod +x "$APPIMAGE_TOOL"
}

download_and_extract_pactus_cli() {
  echo "‚¨áÔ∏è Downloading pactus-cli..."
  wget -q "$PACTUS_CLI_URL" -O pactus-cli.tar.gz

  echo "üì¶ Inspecting and extracting pactus-cli..."
  mkdir -p "$PACTUS_CLI_DEST"

  TOP_LEVEL=$(tar -tzf pactus-cli.tar.gz | head -1 | cut -d/ -f1)

  if tar -tzf pactus-cli.tar.gz | grep -q "^${TOP_LEVEL}/"; then
    echo "üìÅ Detected top-level folder: $TOP_LEVEL"
    tar -xzf pactus-cli.tar.gz --strip-components=1 -C "$PACTUS_CLI_DEST"
  else
    echo "üìÑ No top-level folder found, extracting as-is..."
    tar -xzf pactus-cli.tar.gz -C "$PACTUS_CLI_DEST"
  fi
}

package_appimage() {
  echo "üì¶ Packaging AppImage as ${OUTPUT_NAME}..."
  cp linux/pactus_gui.desktop "$APPDIR/"
  cp linux/pactus_gui.png "$APPDIR/"
  ./"$APPIMAGE_TOOL" "$APPDIR" "$OUTPUT_NAME"

  mkdir -p artifacts
  mv "$OUTPUT_NAME" artifacts/
  echo "‚úÖ AppImage saved to artifacts/${OUTPUT_NAME}"
}

inspect_and_modify_appimage() {
  echo "üîç Extracting AppImage..."
  ./artifacts/"$OUTPUT_NAME" --appimage-extract > /dev/null

  mkdir -p extracted_appimage
  if [ -d squashfs-root ]; then
    mv squashfs-root extracted_appimage/
  fi

  echo "‚úèÔ∏è Creating custom AppRun script..."
  mkdir -p "${EXTRACTED_DIR}"
  cat <<'EOF' > "${EXTRACTED_DIR}/AppRun"
#! /usr/bin/env bash

# autogenerated by linuxdeploy

# make sure errors in sourced scripts will cause this script to stop
set -e

this_dir="$(readlink -f "$(dirname "$0")")"

source "$this_dir"/apprun-hooks/"linuxdeploy-plugin-gtk.sh"

exec "$this_dir"/AppRun.wrapped "$@"
EOF

  chmod +x "${EXTRACTED_DIR}/AppRun"

  echo "üîó Creating symlinks..."
  ln -sf usr/bin/pactus-gui "${EXTRACTED_DIR}/AppRun.wrapped"
  ln -sf usr/share/applications/pactus-gui.desktop "${EXTRACTED_DIR}/pactus-gui.desktop"

  echo "üìÅ Copying pactus-cli files to AppImage content..."
  mkdir -p "$FINAL_CLI_DEST"
  cp -r "$PACTUS_CLI_DEST"/* "$FINAL_CLI_DEST/"

  echo "üå≥ Tree structure of extracted AppImage:"
  tree -l "$EXTRACTED_DIR"
}

rebuild_appimage() {
  echo "üîÅ Rebuilding final AppImage..."
  ./"$APPIMAGE_TOOL" "$EXTRACTED_DIR" "$OUTPUT_NAME"
  mv "$OUTPUT_NAME" artifacts/
  echo "‚úÖ Final rebuilt AppImage: artifacts/$OUTPUT_NAME"
}

# --------------------------------------
# MAIN EXECUTION
# --------------------------------------

install_dependencies
build_flutter_linux
download_appimage_tool
download_and_extract_pactus_cli
package_appimage
inspect_and_modify_appimage
rebuild_appimage
